[
  {
    "objectID": "Variables.html",
    "href": "Variables.html",
    "title": "Dataset and Variables",
    "section": "",
    "text": "The dataset used in this project, MC1_graph.json, is a JSON file generated by Python’s network.node_link_data() function. It can likewise be loaded to a networkx object using the corresponding node_link_graph() function. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges."
  },
  {
    "objectID": "Variables.html#dataset",
    "href": "Variables.html#dataset",
    "title": "Dataset and Variables",
    "section": "",
    "text": "The dataset used in this project, MC1_graph.json, is a JSON file generated by Python’s network.node_link_data() function. It can likewise be loaded to a networkx object using the corresponding node_link_graph() function. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges."
  },
  {
    "objectID": "Variables.html#nodes",
    "href": "Variables.html#nodes",
    "title": "Dataset and Variables",
    "section": "Nodes",
    "text": "Nodes\nThe nodes dataset contains 17,412 entries, each representing an entity within the music network and categorized under the Node Type column as “Person”, “Song”, or “RecordLabel”. Each node includes relevant attributes based on its type—for example, songs have fields such as single, release_date, genre, and notable, while people may have stage_name and notoriety_date. Please refer to following table for more details.\n\n\n\n\n\n\n\n\nNodes Type\nDescription\nAttributes\n\n\n\n\nPerson\nThese can be anyone in the music industry, including singers, producers, instrumentalists, composers, etc.\n\nNode Type (string) – the type of node\nname (string) – the name of the person\nstage_name (string) – if provided, the stage name of the musician\n\n\n\nMusicalGroup\nBands, quartets, small choirs, or other officially organized entities formed by musicians to make music.\n\nNode Type (string) – the type of node\nname (string) – the name of the person\n\n\n\nRecordLabel\nThese are organizations—professional, commercial, or otherwise institutional—involved in the recording, production, or distribution of the music.\n\nNode Type (string) – the type of node\nName (string) – the name of the organization\n\n\n\nSong\nMusic song\n\nNode Type (string) – the type of node\nsingle (boolean) – if provided, specifies whether or not the song was released as a standalone, or as part of a larger album\ngenre (string) – the song’s genre\nnotable (boolean) – whether or not the song has appeared on a top record chart\nrelease_date (string) – the year in which the song was released\nnotoriety_date (string) – if provided, the year in which the song first appeared on a top record chart\nwritten_date (string) – if provided, the year in which the song was written\n\n\n\nAlbum\nMusic Album\n\nNode Type (string) – the type of node\ngenre (string) – the album’s genre\nnotable (boolean) – whether or not the album has appeared on a top record chart\nrelease_date (string) – the year in which the album was released\nnotoriety_date (string) – if provided, the year in which the album first appeared on a top record chart\nwritten_date (string) – if provided, the year in which the album was written"
  },
  {
    "objectID": "Variables.html#edges",
    "href": "Variables.html#edges",
    "title": "Dataset and Variables",
    "section": "Edges",
    "text": "Edges\nThe edges dataset contains 37,857 records and 4 fields to represent the various relationships between entities in the network. Each edge contains the node IDs (source and target) of the starting and ending points, as well as 12 Edge Types describing the nature of the relationship, such as “PerformerOf”, ‘ComposerOf’ or “RecordedBy”. Meanwhile, the key field is used to distinguish between multiple connections between the same node pair. Please refer to following table for more details.\n\n\n\nEdge Type\nDescription\n\n\n\n\nPerformerOf\nIndicates a that the source node (Person or MusicalGroup) performed the destination node (Song or Album)\n\n\nComposerOf\nIndicates that the source node (Person) composed the destination node (Song or Album)\n\n\nProducerOf\nIndicates that the source node (Person or RecordLabel) participated in the production of the destination node’s work (Song, Album, Person, or MusicalGroup)\n\n\nLyricistOf\nIndicates that the source node (Person) wrote lyrics for the destination node (Song or Album)\n\n\nRecordedBy\nIndicates that the destination node (RecordLabel) aided in the recording process for the source node (Song or Album)\n\n\nDistributedBy\nIndicates that the destination node (RecordLabel) aided in the distribution process for the source node (Song or Album)\n\n\nInStyleOf\nIndicates that the source node (Song or Album) was performed at least partly in the style of the destination node (Song, Album, Person, or MusicalGroup)\n\n\nInterpolatesFrom\nIndicates that the source node (Song or Album) interpolated a melody from the destination node (Song or Album).\n\n\nCoverOf\nIndicates that the source node (Song or Album) is a cover of the destination node (Song or Album)\n\n\nLyricalReferenceTo\nIndicates that the source node (Song or Album) makes a lyrical reference to the destination node (Song or Album)\n\n\nDirectlySamples\nIndicates that the source node (Song or Album) consists of (an) audio recording(s) that directly reuse a portion of the audio recording of the destination node (Song or Album) via sampling\n\n\nMemberOf\nIndicates that the source node (Person) is (or was) a member of the destination node (MusicalGroup)"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html",
    "href": "Task_3_Yilin/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "In this exercise, we will be exploring the Vast Challenge 2024 - Mini-Challenge 1"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#setting-the-scene",
    "href": "Task_3_Yilin/Take-home_Ex02.html#setting-the-scene",
    "title": "Take-home Exercise 2",
    "section": "Setting the scene",
    "text": "Setting the scene\nSailor Shift is a global music icon who began her career on the island nation of Oceanus, rooted in the local genre of Oceanus Folk. From modest beginnings, she rose to international fame, initially performing with the all-female band Ivy Echoes (2023–2026), before achieving a solo breakthrough in 2028 with a viral single that topped global charts — an unprecedented milestone for Oceanus Folk.\nSince then, Sailor has released highly successful albums almost annually, explored Indie Pop and Indie Folk, and collaborated widely. Despite branching out, she often returns to Oceanus Folk, playing a major role in expanding its influence globally. Her dual passion for spreading Oceanus Folk and uplifting lesser-known artists is reflected in her frequent collaborations.\nSailor’s fame has also brought attention to her former Ivy Echoes bandmates, together, they’ve helped elevate Oceanus Folk into a vibrant and respected genre, inspiring a new generation of Oceanus artists.\nAs Sailor returns home in 2040, journalist Silas Reed is preparing a retrospective piece, “Oceanus Folk: Then-and-Now”, and has compiled a large knowledge graph of artists, albums, songs, and relationships."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#key-tasks",
    "href": "Task_3_Yilin/Take-home_Ex02.html#key-tasks",
    "title": "Take-home Exercise 2",
    "section": "Key Tasks",
    "text": "Key Tasks\nIn this Exercise, we will use the visualizations to develop a profile of what it means to be a rising star in the music industry.\n\nVisualize the careers of three artists. Compare and contrast their rise in popularity and influence.\nUsing this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#load-packages",
    "href": "Task_3_Yilin/Take-home_Ex02.html#load-packages",
    "title": "Take-home Exercise 2",
    "section": "Load Packages",
    "text": "Load Packages\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\n\nShow the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr, SmartEDA, knitr, RColorBrewer, ggthemr,htmltools,patchwork, purrr, glue, kableExtra, fmsb, scales)"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#import-data",
    "href": "Task_3_Yilin/Take-home_Ex02.html#import-data",
    "title": "Take-home Exercise 2",
    "section": "Import Data",
    "text": "Import Data\nIn the code chunk below, fromJSON() of jsonlite package is used to import MC1_graph.json file into R and save the output object.\n\n\nShow the code\nkg &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#inspect-structure",
    "href": "Task_3_Yilin/Take-home_Ex02.html#inspect-structure",
    "title": "Take-home Exercise 2",
    "section": "Inspect Structure",
    "text": "Inspect Structure\nIn the code chunk below str() is used to reveal the structure of kg object.\n\n\nShow the code\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "href": "Task_3_Yilin/Take-home_Ex02.html#extracting-the-edges-and-nodes-tables",
    "title": "Take-home Exercise 2",
    "section": "Extracting the edges and nodes tables",
    "text": "Extracting the edges and nodes tables\nNext, as_tibble() of tibble package package is used to extract the nodes and links tibble data frames from kg object into two separate tibble data frames called nodes_tbl and edges_tbl respectively.\n\n\nShow the code\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#mapping-from-node-id-to-row-index",
    "href": "Task_3_Yilin/Take-home_Ex02.html#mapping-from-node-id-to-row-index",
    "title": "Take-home Exercise 2",
    "section": "Mapping from node id to row index",
    "text": "Mapping from node id to row index\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\nShow the code\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "href": "Task_3_Yilin/Take-home_Ex02.html#map-source-and-target-ids-to-row-indices",
    "title": "Take-home Exercise 2",
    "section": "Map source and target IDs to row indices",
    "text": "Map source and target IDs to row indices\nNext, we will map the source and the target IDs to row indices by using the code chunk below.\n\n\nShow the code\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#filter-out-any-unmatched-invalid-edges",
    "href": "Task_3_Yilin/Take-home_Ex02.html#filter-out-any-unmatched-invalid-edges",
    "title": "Take-home Exercise 2",
    "section": "Filter out any unmatched (invalid) edges",
    "text": "Filter out any unmatched (invalid) edges\nLastly, the code chunk below will be used to exclude the unmatch edges.\n\n\nShow the code\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#creating-tidygraph",
    "href": "Task_3_Yilin/Take-home_Ex02.html#creating-tidygraph",
    "title": "Take-home Exercise 2",
    "section": "Creating tidygraph",
    "text": "Creating tidygraph\nLastly, tbl_graph() is used to create tidygraph’s graph object by using the code chunk below.\n\n\nShow the code\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\n\n\nConfirm the output object is indeed in tidygraph format by using the code chunk below.\n\n\nShow the code\nclass(graph)\n\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "href": "Task_3_Yilin/Take-home_Ex02.html#visualising-the-knowledge-graph",
    "title": "Take-home Exercise 2",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nShow the code\nset.seed(1234)"
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#visualising-the-whole-graph",
    "href": "Task_3_Yilin/Take-home_Ex02.html#visualising-the-whole-graph",
    "title": "Take-home Exercise 2",
    "section": "Visualising the whole graph",
    "text": "Visualising the whole graph\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n\nShow the code\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\nWarning: The `scale_name` argument of `discrete_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs.\nThe following analysis will be proving in the article below."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#charting-the-ascent",
    "href": "Task_3_Yilin/Take-home_Ex02.html#charting-the-ascent",
    "title": "Take-home Exercise 2",
    "section": "Charting the Ascent",
    "text": "Charting the Ascent\n\nWhat Defines a Rising Star?\nIn the ever-shifting tides of the music industry, the phrase “rising star” is often tossed around—but what does it truly mean to earn that title?\nTo uncover the anatomy of a rising star, we turned to data: chart-topping hits marked as notable works served as the entry point. From there, we traced the artists responsible for these impactful songs and albums through PerformerOf connections in the creative network.\nBut rising stars aren’t defined by a single moment. For each artist in this cohort, we dug deeper—mapping every work they performed, whether it climbed the charts or not. The goal: to reveal a pattern of sustained output and influence. From these works, we extracted core attributes like release year, genre, and notoriety year (when a piece reached public acclaim), helping us track the arc of each artist’s rise.\nThrough this lens, a clear profile emerged. A true rising star is someone who:\n\nReleases steadily, maintaining visibility with one or two new works every year.\nBuilds recognition across time, landing notable works not just once, but over multiple years.\nBridges experimentation and impact, often exploring diverse genres while resonating widely enough to reach the charts.\n\n\n\nShow the code\n# Extract PerformerOf edge\ngraph_performers &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"PerformerOf\")\n\n# Extract Performer nodes & works information\nartist_influence &lt;- graph_performers %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name, `Node Type`, genre, notable, release_date, notoriety_date),\n            by = c(\"target\" = \"id\")) %&gt;%\n  rename(work_id = target,\n         artist_id = source,\n         work_name = name,\n         work_type = `Node Type`) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name, stage_name), \n            by = c(\"artist_id\" = \"id\")) %&gt;%\n  rename(artist_name = name) %&gt;%\n  filter(work_type %in% c(\"Song\", \"Album\"),\n         notable == TRUE) %&gt;%\n  select(artist_id, artist_name, stage_name, work_id, work_name, work_type, genre, \n         release_date, notoriety_date, notable)\n\n# Export as CSV\nwrite_csv(artist_influence, \"artist_influence.csv\")\n\n#Convert \"release_date\" & \"notoriety_date\" as integer\n\ninfluence &lt;- artist_influence %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    notoriety_year = as.integer(notoriety_date),\n    is_notable = if_else(is.na(notoriety_date), FALSE, TRUE)\n  )\n\n\n\n\nConstructing the Profile Criteria for Rising Stars\n\nCharacteristic Traits (Rising Star Profile)\n\nConsistent Output: Releases at least 1–2 works per year to maintain active presence in the industry.\nInfluence Growth Across Years: Demonstrates sustained influence by having notable (charting) works across multiple years, not just a one-time breakout.\n\n\n\nShow the code\n# Step 1: Summarise artist performance metrics\nartist_summary &lt;- influence %&gt;%\n  group_by(artist_name) %&gt;%\n  summarise(\n    total_works = n(),\n    years_active = n_distinct(release_year),\n    first_notoriety = if (all(is.na(notoriety_year))) NA_integer_ else min(notoriety_year, na.rm = TRUE),\n    notable_works = sum(is_notable),\n    notable_years = n_distinct(notoriety_year[!is.na(notoriety_year)])\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    avg_works_per_year = round(total_works / years_active, 1),\n    rising_star_score = notable_works * 2 + total_works + notable_years * 1.5\n  ) %&gt;%\n  arrange(desc(rising_star_score))\n\n# Step 2: Display the top 10 rising stars in a formatted table\nartist_summary %&gt;%\n  slice_head(n = 10) %&gt;%\n  kbl(\n    caption = \"Table 1. Top 10 Rising Stars\",\n    col.names = c(\"Artist Name\", \"Total Works\", \"Years Active\", \"First Chart Year\",\n                  \"Notable Works\", \"Notable Years\", \"Avg. Works/Year\", \"Rising Star Score\"),\n    align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    full_width = FALSE,\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#f2f2f2\")\n\n\n\nTable 1. Top 10 Rising Stars\n\n\nArtist Name\nTotal Works\nYears Active\nFirst Chart Year\nNotable Works\nNotable Years\nAvg. Works/Year\nRising Star Score\n\n\n\n\nKimberly Snyder\n20\n11\n2023\n5\n2\n1.8\n33.0\n\n\nPing Tian\n21\n16\n2010\n3\n3\n1.3\n31.5\n\n\nYang Zhao\n18\n8\n2004\n4\n3\n2.2\n30.5\n\n\nQiang Tang\n15\n9\n2010\n4\n4\n1.7\n29.0\n\n\nUrszula Stochmal\n15\n11\n2004\n4\n4\n1.4\n29.0\n\n\nLei Duan\n14\n10\n1991\n4\n4\n1.4\n28.0\n\n\nPing Meng\n14\n11\n2011\n4\n4\n1.3\n28.0\n\n\nSzymon Pyć\n20\n14\n2010\n2\n2\n1.4\n27.0\n\n\nGang Chen\n9\n8\n2013\n5\n5\n1.1\n26.5\n\n\nJay Walters\n16\n15\n1992\n3\n3\n1.1\n26.5\n\n\n\n\n\nThis ranking highlights the most promising music artists based on their volume of releases, consistency of activity, and multi-year chart presence. Kimberly Snyder, Yang Zhao, and Ping Tian top the list, showing strong momentum and diverse musical influence."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#charting-the-soundscape",
    "href": "Task_3_Yilin/Take-home_Ex02.html#charting-the-soundscape",
    "title": "Take-home Exercise 2",
    "section": "Charting the Soundscape",
    "text": "Charting the Soundscape\n\nHow Rising Stars Shape Their Popularity Across Genres\nIn the ever-evolving landscape of music, genre isn’t just a stylistic choice—it’s a signature. An analysis of the genre distribution among the top three rising stars—Kimberly Snyder, Ping Tian, and Yang Zhao—reveals sharply contrasting approaches to musical identity and audience engagement.\n\n\nShow the code\nggthemr(\"dust\") \n\ntop3_artists &lt;- artist_summary %&gt;%\n  slice_max(rising_star_score, n = 3) %&gt;%\n  pull(artist_name)\n\ngenre_distribution &lt;- influence %&gt;%\n  filter(artist_name %in% top3_artists) %&gt;%\n  count(artist_name, genre)\n\n# Sort genre order\ngenre_order &lt;- genre_distribution %&gt;%\n  count(genre, sort = TRUE) %&gt;%\n  pull(genre)\n\ngenre_distribution$genre &lt;- factor(genre_distribution$genre, levels = genre_order)\n\n# Create color palette (18 genres max)\ngenre_colors &lt;- colorRampPalette(brewer.pal(8, \"Dark2\"))(length(genre_order))\n\n# Calculate total per artist\ngenre_totals &lt;- genre_distribution %&gt;%\n  group_by(artist_name) %&gt;%\n  summarise(total = sum(n))\n\n# Plot\nggplot(genre_distribution, aes(x = reorder(artist_name, -n), y = n, fill = genre)) +\n  geom_col(position = \"stack\", width = 0.7) +\n  geom_text(data = genre_totals, aes(x = artist_name, y = total + 1, label = total),\n            inherit.aes = FALSE, size = 5) +\n  scale_fill_manual(values = genre_colors, name = \"Genre\") +\n  labs(\n    title = \"Genre Distribution of Notable Works by the Top 3 Rising Stars\",\n    subtitle = \"Comparing the creative range of Kimberly Snyder, Yang Zhao, and Ping Tian\",\n    caption = \"Source: Oceanus Folk Archive  |  Chart by FU YILIN\",\n    x = NULL,\n    y = \"Number of Notable Works\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 8)),\n    plot.title.position = \"plot\",\n    plot.caption = element_text(size = 9, face = \"italic\", hjust = 1),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    legend.text = element_text(size = 9)\n  ) +\n  guides(fill = guide_legend(nrow = 3, byrow = TRUE))\n\n\n\n\n\n\n\n\n\nKimberly Snyder has carved out a niche rooted in Dream Pop, reinforcing a signature sound that leans into atmospheric melodies and introspective lyricism. Her body of notable works, while smaller in genre scope, speaks to focused artistic branding. With additional entries in Synthwave and Indie Rock, Snyder presents herself as a refined storyteller within a cohesive sonic world—one that appeals to a specific, loyal following drawn to dreamy soundscapes.\nYang Zhao, by contrast, showcases an emerging profile defined by adaptability. His notable works span a wider stylistic palette, from the earthy rhythms of Indie Folk to the brooding undercurrents of Doom Metal. This cross-genre presence suggests a rising artist who is as comfortable crafting intimate acoustic ballads as he is navigating experimental terrain. Zhao’s blend of raw emotionality and sonic risk-taking positions him as a boundary-pushing voice to watch.\nYet it is Ping Tian who stands out as the most prolific and genre-diverse of the trio. With the highest count of notable works among her peers, Tian’s creative output crosses the boundaries of Lo-Fi Electronica, Oceanus Folk, Avant-Garde Folk, and beyond. Her genre-spanning discography speaks to a bold and exploratory spirit, willing to disrupt musical norms while tapping into underground currents. This genre fluidity not only amplifies her reach but also marks her as a cultural chameleon—equally at home in experimental circles and broader listenerships.\n\n\nAnnual Output Trend of Top 3 Rising Stars\nThe annual output chart reveals distinct artistic trajectories for Kimberly Snyder, Ping Tian, and Yang Zhao.\n\n\nShow the code\nggthemr(\"dust\")\n\n# Step 1: Get top 3 artists\ntop3 &lt;- artist_summary %&gt;%\n  slice_max(rising_star_score, n = 3) %&gt;%\n  pull(artist_name)\n\n# Step 2: Prepare data with all years from first appearance\nyearly_counts &lt;- influence %&gt;%\n  filter(artist_name %in% top3) %&gt;%\n  count(artist_name, release_year) %&gt;%\n  complete(\n    artist_name,\n    release_year = seq(min(release_year, na.rm = TRUE), max(release_year, na.rm = TRUE)),\n    fill = list(n = 0)\n  )\n\n# Step 3: Find peak years for labels\npeaks &lt;- yearly_counts %&gt;%\n  group_by(artist_name) %&gt;%\n  filter(n == max(n)) %&gt;%\n  slice(1) %&gt;%\n  ungroup()\n\n# Step 4: Plot\nggplot(yearly_counts, aes(x = release_year, y = n, fill = artist_name)) +\n  geom_col(position = \"dodge\", width = 0.7) +\n  geom_smooth(\n    aes(color = artist_name, group = artist_name),\n    method = \"loess\", se = FALSE, linewidth = 1, linetype = \"dashed\"\n  ) +\n  geom_text(\n    data = peaks,\n    aes(x = release_year, y = n + 0.5, label = paste0(n, \" in \", release_year)),\n    inherit.aes = FALSE,\n    size = 3.8,\n    fontface = \"bold\",\n    color = \"black\"\n  ) +\n  scale_fill_manual(values = c(\n    \"Kimberly Snyder\" = \"#D55E00\",\n    \"Ping Tian\" = \"darkgrey\",\n    \"Yang Zhao\" = \"#0072B2\"\n  )) +\n  scale_color_manual(values = c(\n    \"Kimberly Snyder\" = \"#D55E00\",\n    \"Ping Tian\" = \"darkgrey\",\n    \"Yang Zhao\" = \"#0072B2\"\n  )) +\n  scale_x_continuous(breaks = seq(min(yearly_counts$release_year, na.rm = TRUE),\n                                  max(yearly_counts$release_year, na.rm = TRUE), 2)) +\n  labs(\n    title = \"Annual Output of the Top 3 Rising Stars\",\n    subtitle = \"Tracking the yearly creative output of Kimberly Snyder, Ping Tian, and Yang Zhao\",\n    caption = \"Source: Oceanus Folk Archive  |  Visualization by FU YILIN\",\n    x = \"Year Released\",\n    y = \"Number of Works\",\n    fill = \"Artist\",\n    color = \"Trend Line\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18, hjust = 0.5),\n    plot.subtitle = element_text(size = 13, hjust = 0.5, margin = margin(b = 10)),\n    plot.caption = element_text(face = \"italic\", size = 9, hjust = 1),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    legend.text = element_text(size = 10),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  ) +\n  guides(\n    fill = guide_legend(title.position = \"top\"),\n    color = guide_legend(title.position = \"top\")\n  )\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nYang Zhao demonstrated an early surge in productivity, peaking with 6 works in 2013, followed by a gradual tapering in later years. In contrast, Ping Tian showed a steady and sustained rise beginning in the mid-2000s, reaching a modest peak of 2 works in 2009, and maintaining a consistent presence in subsequent years—suggesting long-term creative endurance. Kimberly Snyder emerged later but with strong momentum, hitting a peak of 5 works in 2023, indicating a more recent breakthrough and growing influence. The smoothed trend lines underscore these patterns: Yang Zhao’s curve shows early intensity and decline, Ping Tian’s trend is stable and gradual, while Kimberly Snyder’s trajectory is sharply upward—highlighting her as the most recent rising star.\n\n\nAnnual Output Reveals the Rhythms of Three Rising Stars\n\n\nShow the code\nggthemr(\"dust\")\n\n# Get top 3 artists\ntop3 &lt;- artist_summary %&gt;%\n  slice_max(rising_star_score, n = 3) %&gt;%\n  pull(artist_name)\n\n# Total annual output\ntotal_output &lt;- influence %&gt;%\n  filter(artist_name %in% top3) %&gt;%\n  count(artist_name, release_year, name = \"total\")\n\n# Notable works per year\nnotable_output &lt;- influence %&gt;%\n  filter(artist_name %in% top3, is_notable) %&gt;%\n  count(artist_name, release_year, name = \"notable\")\n\n# Merge into one table\ncombined_output &lt;- full_join(total_output, notable_output,\n                             by = c(\"artist_name\", \"release_year\")) %&gt;%\n  replace_na(list(total = 0, notable = 0))\n\n# Plot: Bars = total, Dots = notable\nggplot(combined_output, aes(x = release_year, y = total)) +\n  geom_col(fill = \"#D55E00\", width = 0.7) +\n  geom_point(\n    data = combined_output %&gt;% filter(notable &gt; 0),\n    aes(x = release_year, y = notable),\n    color = \"black\",\n    size = 2.5\n  ) +\n  facet_wrap(~ artist_name, scales = \"free_y\") +\n  labs(\n    title = \"Annual Output vs. Notable Works of Top 3 Rising Stars\",\n    subtitle = \"Comparing release activity and charting success of Kimberly Snyder, Ping Tian, and Yang Zhao\",\n    caption = \"Bars = Total works per year · Dots = Notable (Charting) works\\nSource: Oceanus Folk Archive | Chart by FU YILIN\",\n    x = \"Release Year\",\n    y = \"Number of Works\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18, hjust = 0.5),\n    plot.subtitle = element_text(size = 13, hjust = 0.5, margin = margin(b = 10)),\n    plot.caption = element_text(size = 9, face = \"italic\", hjust = 1),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text = element_text(face = \"bold\", size = 14),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nYang Zhao entered the spotlight with explosive force. His productivity peaked as early as 2013, when he released an impressive six works with 2 notable works, marking the height of his creative burst. But this intensity proved difficult to sustain. After his initial breakout, Zhao’s yearly output gradually tapered, hinting at a front-loaded career that may now be entering a quieter, more selective phase.\nIn contrast, Ping Tian presents the portrait of a slow-burn success. Her creative engine began building momentum in the mid-2000s, with a modest but steady cadence that culminated in a peak year of 2009. While she never experienced the dramatic surges seen in her peers’ careers, Tian’s enduring annual contributions signal a stable and reliable presence in the industry—an artist whose relevance is built on consistency rather than spikes.\nKimberly Snyder, the newest entrant among the three, tells a different story—one of rapid ascent. Her presence was scarcely noted in earlier years, but by 2023, she had achieved a remarkable five notable releases, revealing a sharp upward trajectory. Her trend line surges steeply, signaling not only a recent breakthrough but the potential for continued acceleration.\nWhen viewed side by side, the trio’s trend lines tell a larger story: Zhao blazed brightly and early, Tian has weathered the years with quiet persistence, and Snyder is in the midst of a promising rise. Together, they sketch out the many paths to musical influence—from early fire to sustained flame to late bloom."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#crafting-the-soundscape",
    "href": "Task_3_Yilin/Take-home_Ex02.html#crafting-the-soundscape",
    "title": "Take-home Exercise 2",
    "section": "Crafting the Soundscape",
    "text": "Crafting the Soundscape\n\nA Comparative Look at Three Rising Influencers in Music Production\nIn an era where artistic versatility is as valued as vocal performance, a detailed look at the contribution network of three standout artists—Kimberly Snyder, Ping Tian, and Yang Zhao—reveals contrasting yet compelling creative trajectories.\n\n\nShow the code\nselected_artists &lt;- c(\"Kimberly Snyder\", \"Ping Tian\", \"Yang Zhao\")\n\n#ID\nartist_ids &lt;- graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  filter(name %in% selected_artists) %&gt;%\n  pull(id)\n\n\ngraph_selected_edges &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(\n    `Edge Type` %in% c(\"ComposerOf\", \"ProducerOf\", \"LyricistOf\") &\n    (source %in% artist_ids | target %in% artist_ids)\n  )\n\n\nused_node_indices &lt;- graph_selected_edges %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\ngraph_selected &lt;- graph_selected_edges %&gt;%\n  activate(nodes) %&gt;%\n  mutate(row_id = row_number()) %&gt;%\n  filter(row_id %in% used_node_indices) %&gt;%\n  select(-row_id)\n\n# 计算影响力（节点大小）\ngraph_selected &lt;- graph_selected %&gt;%\n  activate(nodes) %&gt;%\n  mutate(\n    degree = centrality_degree(),\n    notable_flag = ifelse(!is.na(notoriety_date), \"Notable\", \"Other\"),\n    release_year = as.integer(release_date),\n    label_with_year = case_when(\n      `Node Type` %in% c(\"Song\", \"Album\") & !is.na(release_year) ~ paste0(name, \"\\n(\", release_year, \")\"),\n      TRUE ~ name\n    ),\n    size = case_when(\n      `Node Type` == \"Person\" ~ degree * 1.5,\n      !is.na(notoriety_date) ~ 6,\n      TRUE ~ 2\n    )\n  )\n\n\nggraph(graph_selected, layout = \"fr\") +\n  geom_edge_link(aes(color = `Edge Type`), alpha = 0.6, show.legend = TRUE) +\n  geom_node_point(aes(color = `Node Type`, size = size, shape = notable_flag), show.legend = TRUE) +\n  geom_node_text(aes(label = label_with_year), repel = TRUE, size = 3) +\n  scale_edge_color_manual(values = c(\n    ComposerOf = \"#1f77b4\",\n    ProducerOf = \"#2ca02c\",\n    LyricistOf = \"#9467bd\"\n  )) +\n  scale_color_manual(values = c(\n    Person = \"steelblue\",\n    Song = \"gray40\",\n    Album = \"tomato\"\n  )) +\n  scale_shape_manual(values = c(\"Notable\" = 17, \"Other\" = 16)) +\n  guides(\n    color = guide_legend(title = \"Node Type\"),\n    shape = guide_legend(title = \"Work Type\"),\n    edge_color = guide_legend(title = \"Contribution\")\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18, hjust = 0.5),\n    plot.subtitle = element_text(size = 13, hjust = 0.5, margin = margin(b = 10)),\n    plot.caption = element_text(size = 9, face = \"italic\", hjust = 1),\n    legend.title = element_text(face = \"bold\", size = 11),\n    legend.text = element_text(size = 10)\n  ) +\n  labs(\n    title = \"Artist Contribution Network with Influence and Release Year\",\n    subtitle = \"Mapping the roles of Kimberly Snyder, Ping Tian, and Yang Zhao as composers, lyricists, and producers\",\n    caption = \"Node size = contribution influence (degree centrality) · ▲ = notable work\\nSource: Oceanus Folk Archive | Chart by FU YILIN\"\n  )\n\n\n\n\n\n\n\n\n\nKimberly Snyder emerges as the most prolific and critically acclaimed among the trio. Her dense web of connections across ComposerOf, ProducerOf, and LyricistOf roles speaks to both high output and strong creative control.\nPing Tian presents a different profile: measured, steady, and enduring. Her contributions span over three decades, beginning as early as Bride’s Spectral Serenade (1997) and extending to Innocence Untouched (2030). While her network isn’t as dense, it shows remarkable consistency across all three creative roles—indicating a balanced career that has weathered shifts in musical trends while maintaining relevance.\nYang Zhao, by contrast, represents the energy of an emerging voice. Though his contribution network is smaller, it is rapidly expanding, with most of his work materializing post-2013. His role is strongest in lyricism and composition, with recent entries like Symphonic Snowfall (2023) and Unadorned Silence (2027) signaling a sharp rise in influence. His trajectory points not to breadth, but to a focused creative ascent, making him a name to watch as the next influential force in the music landscape.\nTogether, these three artists illustrate distinct paths to impact—Snyder through saturation and acclaim, Tian through longevity and balance, and Zhao through a focused surge of relevance in recent years.\n\n\nMapping the Musical Influence of Three Visionary Artists\nZooming into broader influence to the music industry, the following visualized networks, built on referencing relationships such as DirectlySamples, CoverOf, LyricalReferenceTo, InterpolatesFrom, and InStyleOf, provide a nuanced lens into how creative DNA travels through time and genre.\n\n\nShow the code\nbuild_artist_plot &lt;- function(artist_name_input) {\n  # 1. Get artist ID\n  artist_id &lt;- graph %&gt;%\n    activate(nodes) %&gt;%\n    as_tibble() %&gt;%\n    filter(name == artist_name_input) %&gt;%\n    pull(id)\n\n  # 2. Get works performed by the artist\n  performed_work_ids &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(`Edge Type` == \"PerformerOf\", source == artist_id) %&gt;%\n    as_tibble() %&gt;%\n    pull(target)\n\n  # 3. Get influence edges involving these works\n  influence_types &lt;- c(\"DirectlySamples\", \"LyricalReferenceTo\", \"CoverOf\", \"InterpolatesFrom\", \"InStyleOf\")\n  graph_influence_edges &lt;- graph %&gt;%\n    activate(edges) %&gt;%\n    filter(`Edge Type` %in% influence_types,\n           source %in% performed_work_ids | target %in% performed_work_ids)\n\n  # 4. Get related node ids\n  used_node_ids &lt;- graph_influence_edges %&gt;%\n    activate(edges) %&gt;%\n    as_tibble() %&gt;%\n    select(from, to) %&gt;%\n    unlist() %&gt;%\n    unique()\n\n  # 5. Subset the graph\n  graph_artist_sub &lt;- graph_influence_edges %&gt;%\n    activate(nodes) %&gt;%\n    mutate(row_id = row_number()) %&gt;%\n    filter(row_id %in% used_node_ids) %&gt;%\n    select(-row_id)\n\n  # 6. Compute node attributes\n  graph_artist_sub &lt;- graph_artist_sub %&gt;%\n    activate(nodes) %&gt;%\n    mutate(\n      degree = centrality_degree(),\n      notable_flag = ifelse(!is.na(notoriety_date), \"Notable\", \"Other\"),\n      release_year = as.integer(release_date),\n      label_with_year = case_when(\n        `Node Type` %in% c(\"Song\", \"Album\") & !is.na(release_year) ~ paste0(name, \"\\n(\", release_year, \")\"),\n        TRUE ~ name\n      ),\n      size = case_when(\n        `Node Type` == \"Person\" ~ degree * 1.5,\n        !is.na(notoriety_date) ~ 6,\n        TRUE ~ 2\n      )\n    )\n\n  # 7. Visualize\n  ggraph(graph_artist_sub, layout = \"fr\") +\n  geom_edge_link(aes(color = `Edge Type`), alpha = 0.6, show.legend = TRUE) +\n  geom_node_point(aes(color = `Node Type`, size = size, shape = notable_flag), show.legend = TRUE) +\n  geom_node_text(aes(label = label_with_year), repel = TRUE, size = 3) +\n  scale_edge_color_manual(values = c(\n    DirectlySamples = \"#1f77b4\",\n    LyricalReferenceTo = \"#9467bd\",\n    CoverOf = \"#ff7f0e\",\n    InterpolatesFrom = \"#2ca02c\",\n    InStyleOf = \"#8c564b\"\n  )) +\n  scale_color_manual(values = c(\n    Person = \"steelblue\",\n    Song = \"gray40\",\n    Album = \"tomato\"\n  )) +\n  scale_shape_manual(values = c(\"Notable\" = 17, \"Other\" = 16)) +\n  guides(\n    color = guide_legend(title = \"Node Type\"),\n    shape = guide_legend(title = \"Work Notability\"),\n    size = \"none\",\n    edge_color = guide_legend(title = \"Influence Type\")\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 18, hjust = 0.5),\n    plot.subtitle = element_text(size = 13, hjust = 0.5, margin = margin(b = 10)),\n    plot.caption = element_text(size = 9, face = \"italic\", hjust = 1),\n    legend.title = element_text(face = \"bold\", size = 11),\n    legend.text = element_text(size = 10)\n  ) +\n  labs(\n    title = paste(\"Influence Network of\", artist_name_input),\n    subtitle = \"Mapped through song references: covers, lyrical callbacks, sampling, stylistic echoes, and interpolations\",\n    caption = \"▲ = notable work · Node size = influence degree · Source: Oceanus Folk Archive | Chart by FU YILIN\"\n  )\n}\n\n\n\nKimberly Snyder\n\n\nShow the code\nbuild_artist_plot(\"Kimberly Snyder\")\n\n\n\n\n\n\n\n\n\nKimberly Snyder’s influence network is a dynamic hub of interconnectivity. Works like Beethoven’s Unheard Conversation (2024) and Echoes of a Global Generation (2023) serve as influential anchors, receiving numerous stylistic nods from other artists. Her music is not only frequently covered or sampled but often becomes the stylistic blueprint for future compositions. The presence of multiple notable hits (▲) and the centrality of her network nodes signal that Snyder is both a trendsetter and a continuous source of musical evolution. Her influence arcs outward and forward, with references extending as far as Farewell to the Fading Sun (2035), underscoring a legacy in the making.\n\n\nPing Tian\n\n\nShow the code\nbuild_artist_plot(\"Ping Tian\")\n\n\n\n\n\n\n\n\n\nPing Tian, on the other hand, paints a portrait of quiet resonance and long-term relevance. Her influence network, though less clustered than Snyder’s, stretches across a remarkable timeline—from Bride’s Spectral Serenade (1997) to 2030’s Innocence Untouched. She inspires through lyrical motifs and emotional tone, with works like Lift Me Higher (2012) and Back Up Off Me (2019) frequently echoed via interpolations and references. Rather than dominating stylistic discourse, Tian infuses it—her music acting as connective tissue across decades of songwriting. Her contribution is subtle but foundational.\n\n\nYang Zhao\n\n\nShow the code\nbuild_artist_plot(\"Yang Zhao\")\n\n\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `source == artist_id`.\nCaused by warning in `source == artist_id`:\n! longer object length is not a multiple of shorter object length\n\n\n\n\n\n\n\n\n\nMeanwhile, Yang Zhao’s influence is precise and potent. At the heart of his network is Little Alfie’s Lament (2013)—a standout hit that catalyzes a wave of inspired works. His referencing graph, though less sprawling, is rich in directional influence. Songs like Eva’s Revolutionary Stride (2030) and After the Last Tear Falls (2020) point to Zhao’s growing impact in recent years. The graph’s temporal reach, spanning from early 2000s references to futuristic echoes in the 2030s, positions him as an emerging artist whose emotional narrative and stylistic clarity are shaping the next generation."
  },
  {
    "objectID": "Task_3_Yilin/Take-home_Ex02.html#rising-waves-in-oceanus-folk",
    "href": "Task_3_Yilin/Take-home_Ex02.html#rising-waves-in-oceanus-folk",
    "title": "Take-home Exercise 2",
    "section": "Rising Waves in Oceanus Folk",
    "text": "Rising Waves in Oceanus Folk\n\nWho Will Shape the Genre Next?\nAs Oceanus Folk continues to captivate audiences with its emotive melodies and coastal rhythms, a new generation of talent is beginning to emerge. Our team has applied a multi-layered algorithm to predict the next big names likely to rise to stardom in the genre over the next five years.\n\nData-Driven Discovery\nThe predictive model focuses exclusively on artists who have released Oceanus Folk works since 2030, eliminating outliers like long-established superstar Sailor Shift to surface new potential. The analysis considers several key metrics:\n\nTotal output: How many works the artist has produced since 2030.\nChart impact: A double-weighted score for works that have appeared on notoriety charts.\nCareer momentum: The year of their first release and first notable appearance help determine their early trajectory.\nMulti-role versatility: Artists who serve not just as performers but also as producers, composers, or lyricists receive bonus credit for creative range.\n\nEach artist is assigned a “potential score” combining these elements. This blended measure allows the model to highlight artists not only making waves today but building the foundation for sustained impact.\n\n\n\nThe Next 3 to Watch\n\n\nShow the code\n# Step 1: Identify artists involved in multiple roles\nmulti_role_artists &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% c(\"PerformerOf\", \"ProducerOf\", \"ComposerOf\", \"LyricistOf\")) %&gt;%\n  count(source) %&gt;%\n  filter(n &gt;= 2) %&gt;%\n  pull(source)\n\n# Step 2: Summarize next-gen rising stars\nnext_stars &lt;- influence %&gt;%\n  filter(\n    genre == \"Oceanus Folk\",\n    release_year &gt;= 2030,\n    artist_name != \"Sailor Shift\"\n  ) %&gt;%\n  group_by(artist_name) %&gt;%\n  summarise(\n    total_works = n(),\n    notable_hits = sum(is_notable),\n    first_release = min(release_year, na.rm = TRUE),\n    last_release = max(release_year, na.rm = TRUE),\n    first_notoriety = if (all(is.na(notoriety_year))) NA_integer_ else min(notoriety_year, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    years = paste(first_release, \"–\", last_release),\n    is_multi_role = artist_name %in% (nodes_tbl %&gt;%\n                                        filter(id %in% multi_role_artists) %&gt;%\n                                        pull(name)),\n    active_years = last_release - first_release + 1,\n    potential_score = total_works + notable_hits * 2 + ifelse(is_multi_role, 2, 0)\n  ) %&gt;%\n  arrange(desc(potential_score)) %&gt;%\n  slice_head(n = 3) %&gt;%\n  mutate(\n    profile_md = glue::glue(\n      \"::: {{.panel .panel-borderless}}\\n\",\n      \"**{artist_name}**\\n\\n\",\n      \"- **Active Years:** {years}\\n\",\n      \"- **Total Works:** {total_works}\\n\",\n      \"- **Notable Works:** {notable_hits}\\n\",\n      \"- **Multi-role Contributor:** {ifelse(is_multi_role, 'Yes', 'No')}\\n\",\n      \"- **Career Span:** {active_years} year(s)\\n\",\n      \":::\"\n    )\n  )\n\n\n\nCopper Canyon Ghosts\n\nActive Years: 2034 – 2035\nTotal Works: 7\nNotable Works: 5\nMulti-role Contributor: Yes\nCareer Span: 2 year(s)\n\n\n\nBeatrice Albright\n\nActive Years: 2031 – 2035\nTotal Works: 8\nNotable Works: 4\nMulti-role Contributor: Yes\nCareer Span: 5 year(s)\n\n\n\nDaniel O’Connell\n\nActive Years: 2031 – 2035\nTotal Works: 8\nNotable Works: 4\nMulti-role Contributor: Yes\nCareer Span: 5 year(s)\n\n\nTheir profiles suggest not just short-term success, but long-term influence. These rising voices are poised to define what Oceanus Folk will sound like in the years to come.\n\n\nShow the code\n# Step 1: Get top 3 artist names\ntop3_names &lt;- next_stars$artist_name\n\n# Step 2: Get performer edges for top 3\nartist_song_edges &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\") %&gt;%\n  semi_join(nodes_tbl %&gt;% filter(name %in% top3_names), by = c(\"source\" = \"id\")) %&gt;%\n  select(artist_id = source, song_id = target)\n\n# Step 3: Extract nodes\nartist_nodes &lt;- nodes_tbl %&gt;%\n  filter(name %in% top3_names) %&gt;%\n  mutate(label = name, type = \"Artist\")\n\nsong_nodes &lt;- nodes_tbl %&gt;%\n  filter(id %in% artist_song_edges$song_id) %&gt;%\n  mutate(label = name, type = \"Song\")\n\n# Step 4: Combine and re-index nodes\nall_nodes &lt;- bind_rows(artist_nodes, song_nodes) %&gt;%\n  mutate(graph_id = row_number())\n\n# Step 5: Map original IDs to graph IDs\nnode_map &lt;- all_nodes %&gt;% select(id, graph_id)\n\nedges_mapped &lt;- artist_song_edges %&gt;%\n  left_join(node_map, by = c(\"artist_id\" = \"id\")) %&gt;%\n  rename(from_id = graph_id) %&gt;%\n  left_join(node_map, by = c(\"song_id\" = \"id\")) %&gt;%\n  rename(to_id = graph_id) %&gt;%\n  select(from = from_id, to = to_id)\n\n# Step 6: Create graph and plot\nsong_graph &lt;- tbl_graph(nodes = all_nodes, edges = edges_mapped, directed = FALSE)\n\nggraph(song_graph, layout = \"fr\") +\n  geom_edge_link(color = \"gray80\", alpha = 0.6) +\n  geom_node_point(aes(color = type, shape = type, size = type)) +\n  geom_node_text(aes(label = label), repel = TRUE, size = 3.2) +\n  scale_color_manual(values = c(\"Artist\" = \"#D55E00\", \"Song\" = \"steelblue\")) +\n  scale_shape_manual(values = c(\"Artist\" = 17, \"Song\" = 16)) +\n  scale_size_manual(values = c(\"Artist\" = 6, \"Song\" = 3)) +\n  labs(\n    title = \"Top 3 Rising Stars and Their Performed Works\",\n    subtitle = \"Network visualization of artist-song relationships\",\n    caption = \"Source: Oceanus Folk Archive | Chart by FU YILIN\"\n  ) +\n  theme_void() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 11, hjust = 0.5),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\nIn a striking detail from the network graph, two songs — Tide-Worn Tales and The Sunken Compass — appear anchored at the center of the visual, bridging multiple artist clusters. This suggests that both pieces were performed by more than one rising star, serving as collaborative or cross-influenced works in the Oceanus Folk scene."
  },
  {
    "objectID": "Proposal.html",
    "href": "Proposal.html",
    "title": "Project Overview",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Proposal.html#introduction",
    "href": "Proposal.html#introduction",
    "title": "Project Overview",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Proposal.html#motivation",
    "href": "Proposal.html#motivation",
    "title": "Project Overview",
    "section": "Motivation",
    "text": "Motivation\nOceanus Folk began as a niche genre tied to the cultural identity of the small island nation of Oceanus. Its unexpected global emergence—catalyzed by Sailor Shift’s meteoric career—offers a rare opportunity to examine the interplay between individual stardom, genre influence, and collaborative networks in music. Understanding how a genre spreads and evolves offers insight not only into musical trends but also into networked cultural transmission."
  },
  {
    "objectID": "Proposal.html#methodology",
    "href": "Proposal.html#methodology",
    "title": "Project Overview",
    "section": "Methodology",
    "text": "Methodology\nTo understand the evolution and influence of Oceanus Folk, particularly through the career of Sailor Shift, our team adopted a modular, data-driven approach. The methodology consists of four key components:\n\nNetwork Construction: We parsed a JSON-based music knowledge graph into a tidygraph structure, identifying key node types (artists, songs, albums) and edge relationships (e.g., collaboration, influence). This provided the foundational structure for our visual analytics.\nCareer Profiling: We traced Sailor Shift’s career over time using timeline and slopegraph visualizations to reveal genre transitions and key milestones. This helped surface patterns in her collaborations and viral growth.\nInfluence Analysis: We extracted subgraphs to study how Sailor influenced and was influenced by others. By filtering specific edge types (e.g., coverof, interpolatesfrom), we mapped both direct and indirect genre diffusion and constructed genre-level Sankey diagrams and network timelines.\nRising Star Detection: Using centrality, clustering, and influence scores, we developed a model to highlight rising artists. We compared their early trajectories with Sailor’s to predict future Oceanus Folk influencers."
  },
  {
    "objectID": "Proposal.html#storyboard",
    "href": "Proposal.html#storyboard",
    "title": "Project Overview",
    "section": "Storyboard",
    "text": "Storyboard\nOur storyboard is structured into multiple interactive modules. Each module is specifically designed to address a key question that users may have about the Oceanus Folk music community, enabling them to explore Sailor Shift’s influence and the genre’s evolution from various perspectives. These proposed modules together will create a comprehensive, user-driven exploration platform, enabling a deep dive into the artistic and cultural dynamics of the Oceanus Folk genre.\nFor more details, please move to our Shiny APP!"
  },
  {
    "objectID": "Meeting Minutes/Meeting Minute1.html",
    "href": "Meeting Minutes/Meeting Minute1.html",
    "title": "Meeting Minute1",
    "section": "",
    "text": "Date: May 4, 2025\nTime: 8-9pm\nLocation: Zoom\nAttendees: Fu Yilin, Lu Linsen, Zhang Jinghan\n\n\n\n\nAgree on taking VAST Mini Challenge 1 as our project topic and assigned task to each team member.\n@Lu Linsen: Q1\n@Zhang Jinghan: Q2\n@Fu Yilin: Q3\n\n\n\nThe team jointly discussed and designed the main bar structure of the webpage. The specific details are outlined below\n\nMain Bar:\n\nOverview\nPoster\nShiny App:\n\nShiny App\nUser Guide\n\nPrototype\n\nCode for each of the 3 questions (base on takehome3)\n+Code for Shiny App\n\nTeam\n\n\n\n\n\nStoryline of our project\nContent in each Shiny page\nWhat analysis?/ chart to apply in each page\n\n\n\nAll three members have agreed to adopt a consistent Shiny format for our project, with the details outlined below:\n\nOverview:\n\nGoal/Challenge;\n+Briefing of Module in the App;\n\nUser Guide\nSailor Swift‘s Career Profile   Q1’s analysis\nSpread of Oceanus Folk  Q2’s analysis\nRising Music Stars   Q3’s analysis\nInsight/Conclusion\n\n\n\n\n\nJune 8th, 11:59pm:              Proposal on Netlify\nJune 26th, 11:59pm:             Poster on Elearn\nJuly 2nd, 2:00-3:00pm:        Poster Presentation\nJuly 6th, 11:59pm:               Final Submission (WebPage, Shiny, User guide, Poster, Minute)\n\n\n\n\nDecide how to distinguish input id: id + Initial to avoid conflict?\nWe agree to use variable name +id, e.g. yearinput_F, nameinput_L, genreinput_Z\n\n\n\n\n\nGithub repository build and connect\nWebPage’s Quarto, Css,  qmd & Netlify\nShiny App’s Quarto, Css,  qmd (& Netlify)?\nProposal\nMinute for meeting 1"
  },
  {
    "objectID": "Meeting Minutes/Meeting Minute1.html#agenda",
    "href": "Meeting Minutes/Meeting Minute1.html#agenda",
    "title": "Meeting Minute1",
    "section": "",
    "text": "Agree on taking VAST Mini Challenge 1 as our project topic and assigned task to each team member.\n@Lu Linsen: Q1\n@Zhang Jinghan: Q2\n@Fu Yilin: Q3\n\n\n\nThe team jointly discussed and designed the main bar structure of the webpage. The specific details are outlined below\n\nMain Bar:\n\nOverview\nPoster\nShiny App:\n\nShiny App\nUser Guide\n\nPrototype\n\nCode for each of the 3 questions (base on takehome3)\n+Code for Shiny App\n\nTeam\n\n\n\n\n\nStoryline of our project\nContent in each Shiny page\nWhat analysis?/ chart to apply in each page\n\n\n\nAll three members have agreed to adopt a consistent Shiny format for our project, with the details outlined below:\n\nOverview:\n\nGoal/Challenge;\n+Briefing of Module in the App;\n\nUser Guide\nSailor Swift‘s Career Profile   Q1’s analysis\nSpread of Oceanus Folk  Q2’s analysis\nRising Music Stars   Q3’s analysis\nInsight/Conclusion\n\n\n\n\n\nJune 8th, 11:59pm:              Proposal on Netlify\nJune 26th, 11:59pm:             Poster on Elearn\nJuly 2nd, 2:00-3:00pm:        Poster Presentation\nJuly 6th, 11:59pm:               Final Submission (WebPage, Shiny, User guide, Poster, Minute)\n\n\n\n\nDecide how to distinguish input id: id + Initial to avoid conflict?\nWe agree to use variable name +id, e.g. yearinput_F, nameinput_L, genreinput_Z"
  },
  {
    "objectID": "Meeting Minutes/Meeting Minute1.html#action-list-before-next-meeting",
    "href": "Meeting Minutes/Meeting Minute1.html#action-list-before-next-meeting",
    "title": "Meeting Minute1",
    "section": "",
    "text": "Github repository build and connect\nWebPage’s Quarto, Css,  qmd & Netlify\nShiny App’s Quarto, Css,  qmd (& Netlify)?\nProposal\nMinute for meeting 1"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\n\nShow the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr, SmartEDA, knitr,scales,kableExtra,ggthemr)\n\n# Import Data\nkg &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "EDA.html#getting-start",
    "href": "EDA.html#getting-start",
    "title": "EDA",
    "section": "",
    "text": "In the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\n\nShow the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr, SmartEDA, knitr,scales,kableExtra,ggthemr)\n\n# Import Data\nkg &lt;- fromJSON(\"data/MC1_graph.json\")"
  },
  {
    "objectID": "EDA.html#inspect-structure",
    "href": "EDA.html#inspect-structure",
    "title": "EDA",
    "section": "Inspect Structure",
    "text": "Inspect Structure\nIn the code chunk below str() is used to reveal the structure of kg object.\n\n\nShow the code\nstr(kg, max.level = 1)\n\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:\n\n\nShow the code\n#Extracting the edges and nodes tables\nnodes_tbl &lt;- as_tibble(kg$nodes)\nedges_tbl &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "EDA.html#creating-knowledge-graph",
    "href": "EDA.html#creating-knowledge-graph",
    "title": "EDA",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nBefore we can go ahead to build the tidygraph object, it is important for us to ensures each id from the node list is mapped to the correct row number. This requirement can be achive by using the code chunk below.\n\n\nShow the code\n#Mapping from node id to row index\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n#Map source and target IDs to row indices\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n#Filter out any unmatched (invalid) edges\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n#Creating tidygraph\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = kg$directed)\n\nclass(graph)\n\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "EDA.html#visualising-the-knowledge-graph",
    "href": "EDA.html#visualising-the-knowledge-graph",
    "title": "EDA",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\nIn this section, we will use ggraph’s functions to visualise and analyse the graph object.\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\nShow the code\nset.seed(1234)"
  },
  {
    "objectID": "EDA.html#visualising-the-whole-graph",
    "href": "EDA.html#visualising-the-whole-graph",
    "title": "EDA",
    "section": "Visualising the whole graph",
    "text": "Visualising the whole graph\nIn the code chunk below, ggraph functions are used to visualise the whole graph.\n\n\nShow the code\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\nNotice that the whole graph is very messy and we can hardy discover any useful patterns. In order to gain meaningful visual discovery, it is always useful for us to looking into the details, for example by plotting sub-graphs."
  },
  {
    "objectID": "EDA.html#visualizing-edge-types-frequency",
    "href": "EDA.html#visualizing-edge-types-frequency",
    "title": "EDA",
    "section": "Visualizing Edge Types Frequency",
    "text": "Visualizing Edge Types Frequency\n\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThis bar chart above shows the distribution of different edge types in the music relationship network. The most common type is PerformerOf, indicating that the data heavily captures who performed which work. Other frequent types include ComposerOf, LyricistOf, and ProducerOf, highlighting the importance of creative and production roles. In contrast, relationships like MemberOf and DirectlySamples are less common, suggesting these connections are either rarer or less documented."
  },
  {
    "objectID": "EDA.html#visualizing-node-types-frequency",
    "href": "EDA.html#visualizing-node-types-frequency",
    "title": "EDA",
    "section": "Visualizing Node Types Frequency",
    "text": "Visualizing Node Types Frequency\n\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThis bar chart displays the distribution of different node types in the music network dataset. The most common type is Person, with a count far exceeding other categories, indicating a strong focus on individual artists, producers, and contributors. Songs also appear in large numbers, highlighting the dataset’s emphasis on works being created or performed. Other types like Albums, RecordLabels, and MusicalGroups are present but in significantly smaller quantities."
  },
  {
    "objectID": "EDA.html#key-performance-indicators-of-artists",
    "href": "EDA.html#key-performance-indicators-of-artists",
    "title": "EDA",
    "section": "Key Performance Indicators of Artists",
    "text": "Key Performance Indicators of Artists\n\n\nShow the code\n# Extract PerformerOf edge\ngraph_performers &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"PerformerOf\")\n\n# Extract Performer nodes & works information\nartist_influence &lt;- graph_performers %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name, `Node Type`, genre, notable, release_date, notoriety_date),\n            by = c(\"target\" = \"id\")) %&gt;%\n  rename(work_id = target,\n         artist_id = source,\n         work_name = name,\n         work_type = `Node Type`) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, name, stage_name), \n            by = c(\"artist_id\" = \"id\")) %&gt;%\n  rename(artist_name = name) %&gt;%\n  filter(work_type %in% c(\"Song\", \"Album\"),\n         notable == TRUE) %&gt;%\n  select(artist_id, artist_name, stage_name, work_id, work_name, work_type, genre, \n         release_date, notoriety_date, notable)\n\n# Export as CSV\nwrite_csv(artist_influence, \"artist_influence.csv\")\n\n#Convert \"release_date\" & \"notoriety_date\" as integer\n\ninfluence &lt;- artist_influence %&gt;%\n  mutate(\n    release_year = as.integer(release_date),\n    notoriety_year = as.integer(notoriety_date),\n    is_notable = if_else(is.na(notoriety_date), FALSE, TRUE)\n  )\n\n\n\n\nShow the code\n# Step 1: Summarise artist performance metrics\nartist_summary &lt;- influence %&gt;%\n  group_by(artist_name) %&gt;%\n  summarise(\n    total_works = n(),\n    years_active = n_distinct(release_year),\n    first_notoriety = if (all(is.na(notoriety_year))) NA_integer_ else min(notoriety_year, na.rm = TRUE),\n    notable_works = sum(is_notable),\n    notable_years = n_distinct(notoriety_year[!is.na(notoriety_year)])\n  ) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    avg_works_per_year = round(total_works / years_active, 1),\n    rising_star_score = notable_works * 2 + total_works + notable_years * 1.5\n  ) %&gt;%\n  arrange(desc(rising_star_score))\n\n# Step 2: Display the top 10 rising stars in a formatted table\nartist_summary %&gt;%\n  slice_head(n = 10) %&gt;%\n  kbl(\n    caption = \"Table 1. Top 10 Rising Stars\",\n    col.names = c(\"Artist Name\", \"Total Works\", \"Years Active\", \"First Chart Year\",\n                  \"Notable Works\", \"Notable Years\", \"Avg. Works/Year\", \"Rising Star Score\"),\n    align = \"c\"\n  ) %&gt;%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),\n    full_width = FALSE,\n    position = \"center\"\n  ) %&gt;%\n  row_spec(0, bold = TRUE, background = \"#f2f2f2\")\n\n\n\nTable 1. Top 10 Rising Stars\n\n\nArtist Name\nTotal Works\nYears Active\nFirst Chart Year\nNotable Works\nNotable Years\nAvg. Works/Year\nRising Star Score\n\n\n\n\nKimberly Snyder\n20\n11\n2023\n5\n2\n1.8\n33.0\n\n\nPing Tian\n21\n16\n2010\n3\n3\n1.3\n31.5\n\n\nYang Zhao\n18\n8\n2004\n4\n3\n2.2\n30.5\n\n\nQiang Tang\n15\n9\n2010\n4\n4\n1.7\n29.0\n\n\nUrszula Stochmal\n15\n11\n2004\n4\n4\n1.4\n29.0\n\n\nLei Duan\n14\n10\n1991\n4\n4\n1.4\n28.0\n\n\nPing Meng\n14\n11\n2011\n4\n4\n1.3\n28.0\n\n\nSzymon Pyć\n20\n14\n2010\n2\n2\n1.4\n27.0\n\n\nGang Chen\n9\n8\n2013\n5\n5\n1.1\n26.5\n\n\nJay Walters\n16\n15\n1992\n3\n3\n1.1\n26.5\n\n\n\n\n\nThis table summarizes key performance metrics for each artist, including Total Works, Years Active, First Chart Year, Notable Works, Notable Years, and Average Works per Year.\nTo identify emerging talents, we calculate a composite Rising Star Score using the following formula:\n\n\nRising Star Score = 2 × (Notable Works) + (Total Works) + 1.5 × (Notable Years)\n\n\nThis scoring system gives additional weight to artists who consistently produce notable works and maintain visibility over multiple years, while also accounting for their overall productivity.\nThe table above lists the Top 10 artists with the highest Rising Star Scores, highlighting those who show strong potential and rising influence in the Oceanus Folk community."
  },
  {
    "objectID": "EDA.html#number-of-songs-and-album-by-genre",
    "href": "EDA.html#number-of-songs-and-album-by-genre",
    "title": "EDA",
    "section": "Number of Songs and Album by Genre",
    "text": "Number of Songs and Album by Genre\n\n\nCode\n# Count the number of Songs and Albums in each genre\ngenre_summary &lt;- nodes_tbl %&gt;%\n  filter(`Node Type` %in% c(\"Song\", \"Album\")) %&gt;%\n  count(genre, `Node Type`) %&gt;%\n  pivot_wider(names_from = `Node Type`, values_from = n, values_fill = 0) %&gt;%\n  arrange(desc(Song + Album))\n\n\nprint(genre_summary)\n\n\n# A tibble: 26 × 3\n   genre                Album  Song\n   &lt;chr&gt;                &lt;int&gt; &lt;int&gt;\n 1 Dream Pop              152   590\n 2 Indie Folk             108   342\n 3 Synthwave               74   308\n 4 Doom Metal              80   268\n 5 Oceanus Folk            70   235\n 6 Alternative Rock        53   205\n 7 Southern Gothic Rock    57   185\n 8 Indie Rock              52   156\n 9 Americana               39   145\n10 Psychedelic Rock        32   140\n# ℹ 16 more rows\n\n\nThere are 26 unique genre in total in the network. Dream Pop have greates amount of release in terms of both song and albums among all genres. Dream pop have almost twice as many songs as the second genre(Indie Folk) do.\n\n#| code-fold: true\n#| warning: false\n#| message: false\n\n# 1. Sort by song count\ngenre_order &lt;- genre_summary %&gt;%\n  arrange(desc(Song)) %&gt;%\n  pull(genre)\n\n# 2. transform to long table\ngenre_long &lt;- genre_summary %&gt;%\n  pivot_longer(cols = c(Song, Album), names_to = \"Type\", values_to = \"Count\") %&gt;%\n  mutate(genre = factor(genre, levels = genre_order))\n\n# 3. plot the chart\nggplot(genre_long, aes(x = genre, y = Count, fill = Type)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.9)) +\n  #geom_text(aes(label = Count),\n            #position = position_dodge(width = 0.9),\n            #hjust = 1.05, color = \"black\", size = 3.2) +\n  labs(\n    title = \"Number of Songs and Albums by Genre (Sorted by Song Count)\",\n    x = \"Genre\",\n    y = \"Count\"\n  ) +\n  theme_minimal() +\n  coord_flip()\n\n\n\n\n\n\n\n\nDream Pop and Indie Folk have the most songs overall. In most genres, there are more songs than albums. Oceanus Folk is somewhere in the middle, with a fair number of both songs and albums. Some genres, like Celtic Folk and Sea Shanties, have very few works. This suggests that a few genres are very active, while many others are less popular or more niche"
  },
  {
    "objectID": "EDA.html#number-of-song-release-by-year",
    "href": "EDA.html#number-of-song-release-by-year",
    "title": "EDA",
    "section": "Number of Song Release by Year",
    "text": "Number of Song Release by Year\n\n\nCode\n# Step 1: Filter song nodes with valid release date\nsongs_by_year &lt;- nodes_tbl %&gt;%\n  filter(`Node Type` == \"Song\", !is.na(release_date)) %&gt;%\n  count(release_date, name = \"count\") %&gt;%\n  mutate(release_date = as.numeric(release_date))  # ⬅️ 确保为 numeric 类型\n\n# Step 2: Plot chart with readable x-axis\nggplot(songs_by_year, aes(x = release_date, y = count)) +\n  geom_col(fill = \"steelblue\") +\n  scale_x_continuous(\n    breaks = seq(min(songs_by_year$release_date, na.rm = TRUE),\n                 max(songs_by_year$release_date, na.rm = TRUE),\n                 by = 5)\n  ) +\n  labs(\n    title = \"Number of Songs Released by Year (All Genre)\",\n    x = \"Release Year\",\n    y = \"Number of Songs\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nThe dataset covers song releases from 1975 to 2040. In general, the number of releases increased steadily from 1975, peaking around 2023. After that, the trend declines and returns to levels similar to those in the 1990s."
  },
  {
    "objectID": "EDA.html#number-of-song-and-album-release-in-oceanus-folk-genre-by-year",
    "href": "EDA.html#number-of-song-and-album-release-in-oceanus-folk-genre-by-year",
    "title": "EDA",
    "section": "Number of Song and Album Release in Oceanus Folk Genre by Year",
    "text": "Number of Song and Album Release in Oceanus Folk Genre by Year\n\n\nCode\n# Step 1: Filter Oceanus Folk Songs and Albums with release date\noceanus_by_year &lt;- nodes_tbl %&gt;%\n  filter(genre == \"Oceanus Folk\",\n         `Node Type` %in% c(\"Song\", \"Album\"),\n         !is.na(release_date)) %&gt;%\n  count(release_date, `Node Type`, name = \"count\") %&gt;%\n  mutate(release_date = as.numeric(release_date))  # ⬅️ 转换为数值型\n\n# Step 2: Plot chart with dodged bars\nggplot(oceanus_by_year, aes(x = release_date, y = count, fill = `Node Type`)) +\n  geom_col(position = \"dodge\", width = 0.7) +\n  scale_x_continuous(\n    breaks = seq(min(oceanus_by_year$release_date, na.rm = TRUE),\n                 max(oceanus_by_year$release_date, na.rm = TRUE),\n                 by = 5)\n  ) +\n  labs(\n    title = \"Number of Oceanus Folk Songs and Albums by Year\",\n    x = \"Release Year\",\n    y = \"Count\"\n  ) +\n  scale_fill_manual(values = c(\"Song\" = \"#2f4b7c\", \"Album\" = \"#b2defd\")) +\n  theme_minimal(base_size = 13) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nThis chart shows the number of Oceanus Folk songs and albums released by year. The number of releases gradually increased from the early 2000s and peaked around 2023.Most of the releases are songs, while albums remain fewer across all years. After 2023, there is a slight decline, but both songs and albums continue to be released steadily until the late 2030s. Before 2010, Oceanus Folk activity was very limited. This suggests that Oceanus Folk started gaining popularity in the 2010s and became most active in the early 2020s."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Data Wrangling.html",
    "href": "Data Wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Data Wrangling.html#getting-start",
    "href": "Data Wrangling.html#getting-start",
    "title": "Data Wrangling",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Data Wrangling.html#data-processing",
    "href": "Data Wrangling.html#data-processing",
    "title": "Data Wrangling",
    "section": "Data processing",
    "text": "Data processing\n\nExtracting Edges and Nodes\n\nnodes_tbl &lt;- as_tibble(t_data$nodes)\nedges_tbl &lt;- as_tibble(t_data$links)"
  },
  {
    "objectID": "Data Wrangling.html#creating-knowledge-graph",
    "href": "Data Wrangling.html#creating-knowledge-graph",
    "title": "Data Wrangling",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\n\nMapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\nMap source and target IDs to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\nFilter out any unmatched (invalid) edges\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\nCreating tidygraph\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = t_data$directed)\n\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Data Wrangling.html#visualising-the-knowledge-graph",
    "href": "Data Wrangling.html#visualising-the-knowledge-graph",
    "title": "Data Wrangling",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\nThe tactic we used to conduct our visual analytics is ploting the whole knowledge for this dataset and then plotting sub-graphs to gain meaningful visual discovery since the whole graph will be very messy and we can hardy discover any useful patterns.\n\nset.seed(1234)\n\n\nVisualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Poster.html",
    "href": "Poster.html",
    "title": "Poster",
    "section": "",
    "text": "111"
  },
  {
    "objectID": "Shiny App.html",
    "href": "Shiny App.html",
    "title": "Shiny App",
    "section": "",
    "text": "111"
  },
  {
    "objectID": "User Guide.html",
    "href": "User Guide.html",
    "title": "User Guide",
    "section": "",
    "text": "111"
  }
]