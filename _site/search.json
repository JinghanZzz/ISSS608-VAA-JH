[
  {
    "objectID": "Variables.html",
    "href": "Variables.html",
    "title": "Dataset and Variables",
    "section": "",
    "text": "The dataset used in this project, MC1_graph.json, is a JSON file generated by Python’s network.node_link_data() function. It can likewise be loaded to a networkx object using the corresponding node_link_graph() function. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges."
  },
  {
    "objectID": "Variables.html#dataset",
    "href": "Variables.html#dataset",
    "title": "Dataset and Variables",
    "section": "",
    "text": "The dataset used in this project, MC1_graph.json, is a JSON file generated by Python’s network.node_link_data() function. It can likewise be loaded to a networkx object using the corresponding node_link_graph() function. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges."
  },
  {
    "objectID": "Variables.html#nodes",
    "href": "Variables.html#nodes",
    "title": "Dataset and Variables",
    "section": "Nodes",
    "text": "Nodes\nThe nodes dataset contains 17,412 entries, each representing an entity within the music network and categorized under the Node Type column as “Person”, “Song”, or “RecordLabel”. Each node includes relevant attributes based on its type—for example, songs have fields such as single, release_date, genre, and notable, while people may have stage_name and notoriety_date. Please refer to following table for more details.\n\n\n\n\n\n\n\n\nNodes Type\nDescription\nAttributes\n\n\n\n\nPerson\nThese can be anyone in the music industry, including singers, producers, instrumentalists, composers, etc.\n\nNode Type (string) – the type of node\nname (string) – the name of the person\nstage_name (string) – if provided, the stage name of the musician\n\n\n\nMusicalGroup\nBands, quartets, small choirs, or other officially organized entities formed by musicians to make music.\n\nNode Type (string) – the type of node\nname (string) – the name of the person\n\n\n\nRecordLabel\nThese are organizations—professional, commercial, or otherwise institutional—involved in the recording, production, or distribution of the music.\n\nNode Type (string) – the type of node\nName (string) – the name of the organization\n\n\n\nSong\nMusic song\n\nNode Type (string) – the type of node\nsingle (boolean) – if provided, specifies whether or not the song was released as a standalone, or as part of a larger album\ngenre (string) – the song’s genre\nnotable (boolean) – whether or not the song has appeared on a top record chart\nrelease_date (string) – the year in which the song was released\nnotoriety_date (string) – if provided, the year in which the song first appeared on a top record chart\nwritten_date (string) – if provided, the year in which the song was written\n\n\n\nAlbum\nMusic Album\n\nNode Type (string) – the type of node\ngenre (string) – the album’s genre\nnotable (boolean) – whether or not the album has appeared on a top record chart\nrelease_date (string) – the year in which the album was released\nnotoriety_date (string) – if provided, the year in which the album first appeared on a top record chart\nwritten_date (string) – if provided, the year in which the album was written"
  },
  {
    "objectID": "Variables.html#edges",
    "href": "Variables.html#edges",
    "title": "Dataset and Variables",
    "section": "Edges",
    "text": "Edges\nThe edges dataset contains 37,857 records and 4 fields to represent the various relationships between entities in the network. Each edge contains the node IDs (source and target) of the starting and ending points, as well as 12 Edge Types describing the nature of the relationship, such as “PerformerOf”, ‘ComposerOf’ or “RecordedBy”. Meanwhile, the key field is used to distinguish between multiple connections between the same node pair. Please refer to following table for more details.\n\n\n\nEdge Type\nDescription\n\n\n\n\nPerformerOf\nIndicates a that the source node (Person or MusicalGroup) performed the destination node (Song or Album)\n\n\nComposerOf\nIndicates that the source node (Person) composed the destination node (Song or Album)\n\n\nProducerOf\nIndicates that the source node (Person or RecordLabel) participated in the production of the destination node’s work (Song, Album, Person, or MusicalGroup)\n\n\nLyricistOf\nIndicates that the source node (Person) wrote lyrics for the destination node (Song or Album)\n\n\nRecordedBy\nIndicates that the destination node (RecordLabel) aided in the recording process for the source node (Song or Album)\n\n\nDistributedBy\nIndicates that the destination node (RecordLabel) aided in the distribution process for the source node (Song or Album)\n\n\nInStyleOf\nIndicates that the source node (Song or Album) was performed at least partly in the style of the destination node (Song, Album, Person, or MusicalGroup)\n\n\nInterpolatesFrom\nIndicates that the source node (Song or Album) interpolated a melody from the destination node (Song or Album).\n\n\nCoverOf\nIndicates that the source node (Song or Album) is a cover of the destination node (Song or Album)\n\n\nLyricalReferenceTo\nIndicates that the source node (Song or Album) makes a lyrical reference to the destination node (Song or Album)\n\n\nDirectlySamples\nIndicates that the source node (Song or Album) consists of (an) audio recording(s) that directly reuse a portion of the audio recording of the destination node (Song or Album) via sampling\n\n\nMemberOf\nIndicates that the source node (Person) is (or was) a member of the destination node (MusicalGroup)"
  },
  {
    "objectID": "Shiny App.html",
    "href": "Shiny App.html",
    "title": "Shiny App",
    "section": "",
    "text": "111"
  },
  {
    "objectID": "Poster.html",
    "href": "Poster.html",
    "title": "Poster",
    "section": "",
    "text": "111"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "111"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Data Wrangling.html",
    "href": "Data Wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Data Wrangling.html#getting-start",
    "href": "Data Wrangling.html#getting-start",
    "title": "Data Wrangling",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce, jsonlite, dplyr)\n\n\n\n\n\nt_data &lt;- fromJSON(\"data/MC1_graph.json\",\n                   simplifyDataFrame = TRUE)"
  },
  {
    "objectID": "Data Wrangling.html#data-processing",
    "href": "Data Wrangling.html#data-processing",
    "title": "Data Wrangling",
    "section": "Data processing",
    "text": "Data processing\n\nExtracting Edges and Nodes\n\nnodes_tbl &lt;- as_tibble(t_data$nodes)\nedges_tbl &lt;- as_tibble(t_data$links)"
  },
  {
    "objectID": "Data Wrangling.html#creating-knowledge-graph",
    "href": "Data Wrangling.html#creating-knowledge-graph",
    "title": "Data Wrangling",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\n\nMapping from node id to row index\n\nid_map &lt;- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n\n\n\nMap source and target IDs to row indices\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from = index) %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to = index)\n\n\n\nFilter out any unmatched (invalid) edges\n\nedges_tbl &lt;- edges_tbl %&gt;%\n  filter(!is.na(from), !is.na(to))\n\n\n\nCreating tidygraph\n\ngraph &lt;- tbl_graph(nodes = nodes_tbl, \n                   edges = edges_tbl, \n                   directed = t_data$directed)\n\n\nclass(graph)\n\n[1] \"tbl_graph\" \"igraph\""
  },
  {
    "objectID": "Data Wrangling.html#visualising-the-knowledge-graph",
    "href": "Data Wrangling.html#visualising-the-knowledge-graph",
    "title": "Data Wrangling",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\nThe tactic we used to conduct our visual analytics is ploting the whole knowledge for this dataset and then plotting sub-graphs to gain meaningful visual discovery since the whole graph will be very messy and we can hardy discover any useful patterns.\n\nset.seed(1234)\n\n\nVisualising the whole graph\n\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`), \n                  size = 4) +\n  geom_node_text(aes(label = name), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n\nWarning: ggrepel: 17411 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Proposal.html",
    "href": "Proposal.html",
    "title": "Project Overview",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Proposal.html#introduction",
    "href": "Proposal.html#introduction",
    "title": "Project Overview",
    "section": "",
    "text": "The music industry is constantly evolving, with emerging genres and artists reshaping cultural landscapes. One notable example is the rise of “Oceanus Folk,” a genre popularized by the artist Sailor Shift. Understanding her influence requires examining musical trends, collaboration networks, and the genre’s transformation over time.\nHence, there is a need for analytical tools that allow users to explore Sailor Shift’s career, collaborations, and legacy within the broader Oceanus Folk community. In this project, we propose a data-driven approach using visualizations to uncover key patterns in her artistic journey and forecast future genre developments."
  },
  {
    "objectID": "Proposal.html#motivation",
    "href": "Proposal.html#motivation",
    "title": "Project Overview",
    "section": "Motivation",
    "text": "Motivation\nOceanus Folk began as a niche genre tied to the cultural identity of the small island nation of Oceanus. Its unexpected global emergence—catalyzed by Sailor Shift’s meteoric career—offers a rare opportunity to examine the interplay between individual stardom, genre influence, and collaborative networks in music. Understanding how a genre spreads and evolves offers insight not only into musical trends but also into networked cultural transmission."
  },
  {
    "objectID": "Proposal.html#methodology",
    "href": "Proposal.html#methodology",
    "title": "Project Overview",
    "section": "Methodology",
    "text": "Methodology\nTo understand the evolution and influence of Oceanus Folk, particularly through the career of Sailor Shift, our team adopted a modular, data-driven approach. The methodology consists of four key components:\n\nNetwork Construction: We parsed a JSON-based music knowledge graph into a tidygraph structure, identifying key node types (artists, songs, albums) and edge relationships (e.g., collaboration, influence). This provided the foundational structure for our visual analytics.\nCareer Profiling: We traced Sailor Shift’s career over time using timeline and slopegraph visualizations to reveal genre transitions and key milestones. This helped surface patterns in her collaborations and viral growth.\nInfluence Analysis: We extracted subgraphs to study how Sailor influenced and was influenced by others. By filtering specific edge types (e.g., coverof, interpolatesfrom), we mapped both direct and indirect genre diffusion and constructed genre-level Sankey diagrams and network timelines.\nRising Star Detection: Using centrality, clustering, and influence scores, we developed a model to highlight rising artists. We compared their early trajectories with Sailor’s to predict future Oceanus Folk influencers."
  },
  {
    "objectID": "Proposal.html#storyboard",
    "href": "Proposal.html#storyboard",
    "title": "Project Overview",
    "section": "Storyboard",
    "text": "Storyboard\nOur storyboard is structured into multiple interactive modules. Each module is specifically designed to address a key question that users may have about the Oceanus Folk music community, enabling them to explore Sailor Shift’s influence and the genre’s evolution from various perspectives. These proposed modules together will create a comprehensive, user-driven exploration platform, enabling a deep dive into the artistic and cultural dynamics of the Oceanus Folk genre.\nFor more details, please move to our Shiny APP!"
  },
  {
    "objectID": "User Guide.html",
    "href": "User Guide.html",
    "title": "User Guide",
    "section": "",
    "text": "111"
  }
]